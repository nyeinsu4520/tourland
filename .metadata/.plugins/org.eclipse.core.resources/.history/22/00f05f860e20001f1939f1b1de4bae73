package com.example.demo;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;

import jakarta.validation.Valid;

@Controller
public class BookingController {

	
	@Autowired
    private BookingRepository bookingPackageRepo;
	@Autowired 
	private PackageRepository packageRepo;
	
	
	@GetMapping("/booking/package")
	public String viewCategories(Model model) {
		
		List<Booking> bookingpackageList=bookingPackageRepo.findAll();// select *from category
		model.addAttribute("bookingpackageList",bookingpackageList);
		return "booking";
	}
	
	
	@GetMapping("/add")
	public String addItem(Model model) {
		model.addAttribute("item",new Item());
		List<Category> categorylist=categoryRepo.findAll();
		model.addAttribute("categorylist",categorylist);
		return "add_item";
	}
	
	
	@PostMapping("/save")
	public String saveItem(@Valid Item item,BindingResult bindingResult, @RequestParam("itemImage") MultipartFile imgFile,Model model) {
	if(bindingResult.hasErrors()) {
		List<Category> categorylist=categoryRepo.findAll();
		model.addAttribute("categorylist",categorylist);
		return "add_item";
	}
	
	String imageName = imgFile.getOriginalFilename();
	// set the image name in item object
	item.setImgname(imageName);
	// save the item obj to the db
	Item savedItem = itemRepo.save(item);
	try {
	// prepare the directory path
	String uploadDir = "uploads/items/" + savedItem.getId();
	Path uploadPath = Paths.get(uploadDir);
	// check if the upload path exists, if not it will be created
	if (!Files.exists(uploadPath)) {
	Files.createDirectories(uploadPath);
	}
	// prepare path for file
	Path fileToCreatePath = uploadPath.resolve(imageName);
	System.out.println("File path: " + fileToCreatePath);
	// copy file to the upload location
	Files.copy(imgFile.getInputStream(), fileToCreatePath, StandardCopyOption.REPLACE_EXISTING);
	} catch (IOException e) {
	// TODO Auto-generated catch block
	e.printStackTrace();
	}
	itemRepo.save(item);
	return "redirect:/view";
	}
	
	
	
	
	
	@GetMapping("/booking/package/add")
	public String addBookingPackage(Model model) {
		model.addAttribute("booking",new Booking());
		List<Package> packagelist=packageRepo.findAll();
		model.addAttribute("packagelist",packagelist);
		return "Add_packagebooking";
	}
	
	
	public String saveItem(@Valid Booking booking,BindingResult bindingResult,Model model) {
		if(bindingResult.hasErrors()) {
			List<Package> packagelist=packageRepo.findAll();
			model.addAttribute("packagelist",packagelist);
			return "Add-packagebooking";
		}
		bookingPackageRepo.save(booking);
		return "redirect:/booking/package";
	}
}
