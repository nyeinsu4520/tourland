package com.example.demo;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.stereotype.Service;
import java.util.Optional;

@Service
public class MemberServiceImpl implements MemberService {

    @Autowired
    private MemberRepository memberRepository;

    @Override
    public Optional<Member> findById(Integer id) {
        return memberRepository.findById(id);
    }

    @Override
    public String findIdByUsername(String username) {
        Member member = memberRepository.findByUsername(username);
        return member != null ? String.valueOf(member.getId()) : null;
    }

    @Override
    public Member findByUsername(String name) {
        return memberRepository.findByUsername(name);
    }

    // You can implement more methods here for other operations related to members
    
    @Override
    public Integer getLoggedInMemberId() {
        Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
        if (authentication != null && authentication.isAuthenticated()) {
            // Assuming your logged-in user principal has the member ID stored as Integer
            // Replace this with your actual logic to fetch member ID from authentication
            // Example: return ((YourCustomUserDetails) authentication.getPrincipal()).getMemberId();
            // This is just a placeholder, adjust it based on your UserDetails implementation
            return 1; // Replace with actual member ID retrieval logic
        }
        return null; // Return null or handle appropriately if member ID not found
    }
}
